===VSCODE===
Extensions: 
- Color Highlight
- Auto Rename Tag
- Image Preview
- Live Server
- Highlight Matching Tag

Setting:
- Auto Close Tag = checked
- Tab Size = 2
- Auto Save = OnFocusChange
- Format on Save = checked

===Notes===
Font: 
- font-size
- font-style (italic)
- font-transform (uppercase)
- font-family (sans-serif)
- font-weight (bold)

- letter-spacing
- line-height
---------------------------------------
background-color: #f7f7f7;
color: #444;

---------------------------------------

Descendents Selectors: select ALL children in that tag 
	i.e: footer p{}: select all <p> tag in <footer> 
	
---------------------------------------
ul, ol:
- list-style: none (remove bullets)

use class instead of id for future preparations 

a:link{} a:visited{}, a:hover{}, a:active{}
- text-decoration:none;


---------------------------------------
Conflicts between Selectors (Multiple styles apply to 1 selector)
- same kind of selectors >> then the last will apply
1) !important (hack >> not recommened) 
2) Inline Style
3) ID
4) Class or Pseudo Class
5) Element 
6) Universal (*)

---------------------------------------
not every properties are inheritted >> just text, color properties are inheritted 
NOT INHERITTED: border


---------------------------------------
universal selector: no inheritance >> just apply to all elements >> easy to overwrite every single element will have border-top 

---------------------------------------
Box Model >> Final element width = LeftBorder + Left Padding + With + RightPadding + RightBorder (NO MARGIN) >> this is the DEFAULT behaviour
.main-header{
	padding: 20px;
	width: 80px 
} >> the width is not 80px, but 80 + 20 + 20 = 120px

Usually, we don't want margin-bot for the last item in <li>, we just want space between each <li> >>> use pseudo class

We always use margin-bot to create vertical margin between parts in our website >> Don't mix between margin-top and margin-top at the same time >>> use only 1

Collapsing Margins: when we have 2 margins occupy the same space, just 1 of them is shown (most of the time is the bigger one )

---------------------------------------
width: 30px;
height: auto; // scale height base on height

---------------------------------------

put everything in the container >> <div class="container"> </div>

.container {
  width: 800px;
  margin: 0 auto;
}

----------------------------------------

Block Level Boxes: h1, p, body, main, header, footer, seciton, nav, aside, div, ul, ol, li...
- occupy 100% of parent element's width no matter the content 
- stack vertically by default, one after another 
- box-model is applied
- display: block

Inline Level Boxes: Img, strong, a, em, button ...
- occupies only the space necessary for its content 
- cause no line-break after or before the element 
- box-level applies in a diff way: heights & widths do not apply 
- padding & margin are applied only horizontally (Left & Right)
- display: inline


== INLINE-BLOCK: 
- display: inline-block
- occupies only content's space 
- causes no line breaks
- box-model apllies normally >> can apply width, height + margin
>> look like inline, but behave like block 

<img> tag is default inline-block >> we can test by setting up the margin, then we can see the margin-top & bot are applied without set display: inline-block

-------------------------------------------

Normal Flow: 
- position: relative 

Absolute Positioning 
- position: absolute 
- out of low 
- no impact on surrounding element >> might overlap them 
- we use top, bot, left, right to offset the element from its "relatively positioned container"
- need to be "inside" of parent container in order to set the position correctly

If there's no relative container >>> relate to the viewport 


body{
	position: relative;
}
container{
	position: relative;
}
button{
	position: absolute;
}

if the button are inside the .container, and both <body> and .container has position:relative >> relate to nearest parent >> relate to .container's position

---------------------------------------
PSEUDO ELEMENT
- first-letter
- first-line

h1::first-letter{

}

div + p::first-line >>> selects the first <p> element that is placed immediately after <div> elements


h2{
	position:relative;
}

h2::after {
  content: "TOP"; /*mandatory*/
  background-color: lightgoldenrodyellow;
  font-size: 16px;
  display: inline-block;
  padding: 5px 10px;
  position: absolute;
  top: -5px;
  right: 5px;
}


========== LAYOUTS: FLOATS, FLEXBOX & CSS GRID =======

FLOAT: 
.container{
	float: left; // khi set như vậy thì những elements khác sẽ float around thằng này >> lúc này nếu set padding của những item xung quanh sẽ ra không đủ >> lý do là vì item sẽ bắt đầu ngay phía dưới của element đc float 
}

Khi 2 element kế bên đều float thì height của chúng sẽ bị collapse >> lúc này height = 0





